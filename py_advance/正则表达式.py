import re
from typing import Optional
num1='123 456 789'
num2='456 123 789'

# 使用 Optional 类型注释表示 result 可能是 re.Match 对象或 None
result: Optional[re.Match]=re.match('123',num1) # 只匹配开头，如果没成功就返回none
print(result) # 一个对象 <re.Match object; span=(0, 3), match='123'>
if result!=None:
    print(result.span()) # (0, 3)
    print(result.group()) # 123

# re.search也是一样,但是是全文从头到尾搜索，匹配到对应值就结束，也有span和group

str1="45648194544945412345984894548912345498456123"
result2=re.findall('123',str1)
print(result2)# ['123', '123', '123']   ,找不到则返回空列表


# . ：匹配任意一个字符（除了换行符）。
# \. ：匹配点本身
# []：匹配方括号内列举的字符。
# \d：匹配数字，即0到9之间的任何数字。
# \D：匹配非数字。
# \s：匹配空白字符，包括空格和制表符等。
# \S：匹配非空白字符。
# \w：匹配单词字符，包括字母、数字和下划线。
# \W：匹配非单词字符。

# 在字符串前加r可使转义字符无效，如r'new line \n'


str2='  sdafdsg;eh;[]ahaer][h;/df.bd f]]432]4.62]6,5p4,y254.g][.[b4q.5.62456.54.b2[]4g.2h[5hp,64m]]]'

print(re.findall(r'\d',str2)) # ['4', '3', '2', '4', '6', '2', '6', '5', '4', '2', '5', '4', '4', '5', '6', '2', '4', '5', '6', '5', '4', '2', '4', '2', '5', '6', '4']

print(re.findall(r'\W',str2)) # [' ', ' ', ';', ';', '[', ']', ']', '[', ';', '/', '.', ' ', ']', ']', ']', '.', ']', ',', ',', '.', ']', '[', '.', '[', '.', '.', '.', '.', '[', ']', '.', '[', ',', ']', ']', ']']

print(re.findall(r'[abc]',str2)) # ['a', 'a', 'a', 'b', 'b', 'b']
print()
# 还可以加0-9，a-c,d-f,5-7
print(re.findall(r'[a-zA-Z]',str2)) # ['s', 'd', 'a', 'f', 'd', 's', 'g', 'e', 'h', 'a', 'h', 'a', 'e', 'r', 'h', 'd', 'f', 'b', 'd', 'f', 'p', 'y', 'g', 'b', 'q', 'b', 'g', 'h', 'h', 'p', 'm']

# *：匹配前一个规则的字符出现0至无数次。
# +：匹配前一个规则的字符出现1至无数次。
# ?：匹配前一个规则的字符出现0次或1次。
# {m}：匹配前一个规则的字符出现m次。
# {m,}：匹配前一个规则的字符出现至少m次。
# {m,n}：匹配前一个规则的字符出现m到n次。

# ^：匹配字符串的开头。
# $：匹配字符串的结尾。
# \b：匹配一个单词的边界。
# \B：匹配非单字边界。

# |表示或
# ()可用于分组

# *：匹配前一个规则的字符出现0至无数次。
# +：匹配前一个规则的字符出现1至无数次。
# ?：匹配前一个规则的字符出现0次或1次。
# {n}：匹配前一个规则的字符出现n次。
# {n,}：匹配前一个规则的字符出现至少n次。
# {m,n}：匹配前一个规则的字符出现m到n次。

print()

# 匹配用户名

name="/////////////////////////////////////////////zjp_991F//////////////////////////////////////////////////////////"
print(re.findall(r'\w{1,10}',name)) # ['zjp_991F']

name="、、、、、、、、、、、、、、、、zjp_991F"
print(re.findall(r'\w{1,10}$',name)) # ['zjp_991F']       #{1, 10}多一个空格不行

name="/////////////////////////////////////////////zj、p_、9、9、1F//////////////////////////////////////////////////////////"
print(re.findall(r'\w{3,10}',name)) # []


r=r'^[1-9][0-9]{4,10}$' # 要求纯数字，长度5-11，第一位不为0的规则
r2=r'^[1-9][0-9]{4,10}'
qqNumber='11111836288777777777777777777777777'
print(re.findall(r2,qqNumber)) # ['11111183628']

r_mail=r'(^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$)' # \u4e00-\u9fa5汉字

e_mail='928付件8zhi@gmail.com.cn'
print(re.findall(r_mail,e_mail)) # [('928付件8zhi@gmail.com.cn', '.cn')] #findall方法在遇到（）组的时候就会把符合组的内容都输出，所以这里有两个
# 用match替代findall就可以用。group获取那个大括号的整体结果，大括号里面的小括号就没

